/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include <CoreGraphics/CoreGraphics.h>

typedef struct RS_AppModel RS_AppModel;

/**
 * All colors in Vectorizable are parameterized over the environmentâ€™s color
 * scheme preference, and these settings define the color of a given object
 * for a given light or dark color scheme preference.
 */
typedef struct RS_ColorScheme RS_ColorScheme;

typedef struct RS_MetalBackendContext RS_MetalBackendContext;

/**
 * A simple pain-free pointer to wrap your types in for FFI export.
 */
typedef struct RS_Pointer_AppModel
{
  struct RS_AppModel *ptr;
} RS_Pointer_AppModel;

typedef struct RS_Pointer_AppModel RS_AppModelPtr;

typedef struct RS_Point
{
  float x;
  float y;
} RS_Point;

/**
 * A simple pain-free pointer to wrap your types in for FFI export.
 */
typedef struct RS_Pointer_MetalBackendContext
{
  struct RS_MetalBackendContext *ptr;
} RS_Pointer_MetalBackendContext;

typedef struct RS_Pointer_MetalBackendContext RS_MetalBackendContextPtr;

void toolbar_set_current_layer_to_foreground(void);

void toolbar_set_current_layer_to_background(void);

RS_AppModelPtr app_model_new(void);

void app_model_free(RS_AppModelPtr ptr);

void app_model_begin_stroke(RS_AppModelPtr ptr);

void app_model_record_stroke_sample(RS_AppModelPtr ptr, struct RS_Point point);

void app_model_end_stroke(RS_AppModelPtr ptr);

void app_model_try_flush(RS_AppModelPtr ptr);

void app_model_force_flush(RS_AppModelPtr ptr);

RS_MetalBackendContextPtr vectorizable_metal_backend_context_init(void *device, void *queue);

void vectorizable_metal_backend_context_reload_view_surface(RS_MetalBackendContextPtr metal_backend_context_ptr,
                                                            const void *view);

void vectorizable_draw_flush_and_submit_background(RS_MetalBackendContextPtr metal_backend_context_ptr,
                                                   RS_AppModelPtr app_model_ptr,
                                                   const void *view);

void vectorizable_draw_flush_and_submit_background_active(RS_MetalBackendContextPtr metal_backend_context_ptr,
                                                          RS_AppModelPtr app_model_ptr,
                                                          const void *view);

void vectorizable_draw_flush_and_submit_foreground(RS_MetalBackendContextPtr metal_backend_context_ptr,
                                                   RS_AppModelPtr app_model_ptr,
                                                   const void *view);

void vectorizable_draw_flush_and_submit_foreground_active(RS_MetalBackendContextPtr metal_backend_context_ptr,
                                                          RS_AppModelPtr app_model_ptr,
                                                          const void *view);
